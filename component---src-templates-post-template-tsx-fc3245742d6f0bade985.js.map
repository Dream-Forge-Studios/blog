{"version":3,"file":"component---src-templates-post-template-tsx-fc3245742d6f0bade985.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/lib/observer.ts","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport type PostHeadInfoProps = {\r\n    title: string\r\n    date: string\r\n    categories: string[]\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 1020px;;\r\n  height: 100%;\r\n  margin: 18px auto;\r\n  padding: 60px 0;\r\n  color: #ffffff;\r\n\r\n  @media (max-width: 1020px) {\r\n    width: 100%;\r\n    padding: 40px 20px;\r\n  }\r\n`\r\n\r\nconst PrevPageIcon = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background: #ffffff;\r\n  color: #000000;\r\n  font-size: 22px;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n\r\n  @media (max-width: 1020px) {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 32px;\r\n  font-weight: 800;\r\n\r\n  @media (max-width: 1020px) {\r\n    font-size: 30px;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n\r\n  @media (max-width: 1020px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n  }\r\n`\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n                                                                         title,\r\n                                                                         date,\r\n                                                                         categories,\r\n                                                                     }) {\r\n    const goBackPage = () => window.history.back();\r\n\r\n    return (\r\n        <PostHeadInfoWrapper>\r\n            {/*<PrevPageIcon onClick={goBackPage}>*/}\r\n            {/*    <FontAwesomeIcon icon={faArrowLeft} />*/}\r\n            {/*</PrevPageIcon>*/}\r\n            <Title>{title}</Title>\r\n            <PostData>\r\n                <div>{categories.join(' / ')}</div>\r\n                <div>{date}</div>\r\n            </PostData>\r\n        </PostHeadInfoWrapper>\r\n    )\r\n}\r\n\r\nexport default PostHeadInfo","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\r\n\r\ntype PostHeadProps = PostHeadInfoProps & {\r\n    thumbnail: IGatsbyImageData\r\n}\r\n\r\ntype GatsbyImgProps = {\r\n    image: IGatsbyImageData\r\n    alt: string\r\n    className?: string\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n\r\n  @media (max-width: 1020px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\r\n    <GatsbyImage {...props} style={{ position: 'absolute',  height: '300px'}} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 400px;\r\n  object-fit: cover;\r\n  filter: brightness(0.25);\r\n\r\n  @media (max-width: 1020px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\r\n                                                                 title,\r\n                                                                 date,\r\n                                                                 categories,\r\n                                                                 thumbnail,\r\n                                                             }) {\r\n    return (\r\n        <PostHeadWrapper>\r\n            <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\r\n            <PostHeadInfo title={title} date={date} categories={categories} />\r\n        </PostHeadWrapper>\r\n    )\r\n}\r\n\r\nexport default PostHead\r\n","import {Dispatch, SetStateAction} from 'react';\r\n\r\nconst observerOption = {\r\n    threshold: 0.4,\r\n    rootMargin: '-60px 0px 0px 0px',\r\n};\r\n\r\nexport const getIntersectionObserver = (setState: Dispatch<SetStateAction<string>>) => {\r\n    let direction = '';\r\n    let prevYposition = 0;\r\n\r\n    // scroll 방향 check function\r\n    const checkScrollDirection = (prevY: number) => {\r\n        if (window.scrollY === 0 && prevY === 0) return;\r\n        else if (window.scrollY > prevY) direction = 'down';\r\n        else direction = 'up';\r\n\r\n        prevYposition = window.scrollY;\r\n    };\r\n\r\n    // observer\r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach((entry) => {\r\n            checkScrollDirection(prevYposition);\r\n            if ((direction === 'down' && !entry.isIntersecting) ||\r\n                (direction === 'up' && entry.isIntersecting)) {\r\n                setState(entry.target.innerHTML);\r\n            }\r\n        });\r\n    }, observerOption);\r\n\r\n    return observer;\r\n}","import React, {FunctionComponent, useState, useEffect} from 'react'\r\nimport styled from '@emotion/styled'\r\nimport {getIntersectionObserver} from '../../lib/observer'\r\nimport {css} from \"@emotion/react\";\r\n\r\ninterface PostContentProps {\r\n    html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 800px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n\r\n  // Markdown Responsive Design\r\n  @media (max-width: 800px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 50px 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst H1 = styled.div<{HighLight: boolean}>`\r\n  padding: 6px 0px;\r\n  opacity: ${props => props.HighLight ? \"1\" : \"0.5\"};\r\n  font-size: 17px;\r\n  color: ${props => props.HighLight ? \"#8ddb8c\" : \"#000\"};\r\n\r\n  &:hover{\r\n    color: -webkit-link;\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nconst H2 = styled.div<{HighLight: boolean}>`\r\n  padding: 6px 0px;\r\n  border-left: 1px solid #000;\r\n  color: ${props => props.HighLight ? \"#8ddb8c\" : \"#000\"};\r\n  font-size: 17px;\r\n  opacity: ${props => props.HighLight ? \"1\" : \"0.5\"};\r\n  margin-left: 5px;\r\n  padding-left: 10px;\r\n\r\n  &:hover{\r\n    color: -webkit-link;\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  //display: block;\r\n  //margin: 0 auto;\r\n`\r\n\r\nconst Toc = styled.div`\r\n  display: block;\r\n  position: fixed;\r\n  width: 500px;\r\n  margin: 110px auto;\r\n  left: 0;\r\n  right: 0;\r\n`\r\n\r\nconst Toc2 = styled.div`\r\n  margin-left: 700px;\r\n  width: 300px;\r\n`\r\n\r\nconst MenuDivStyle = css`\r\n  width: 150px;\r\n`\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n\r\n    const [currentInnerHTML, setCurrentInnerHTML] = useState<string>(''); //현재 목차\r\n    const [headingEls, setHeadingEls] = useState<Element[]>([]); //관찰 대상\r\n\r\n    useEffect(() => {\r\n        const observer = getIntersectionObserver(setCurrentInnerHTML);\r\n        const headingElements = Array.from(document.querySelectorAll('h1, h2'));\r\n        setHeadingEls(headingElements);\r\n        headingElements.map((header) => {\r\n            observer.observe(header);\r\n        });\r\n    }, []);\r\n    console.log(currentInnerHTML)\r\n    return (\r\n        <ContentWrapper>\r\n            <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n            <Toc>\r\n                <Toc2>\r\n            {headingEls.map((a) => {\r\n                let HighLight: boolean = false;\r\n                if (currentInnerHTML == a.innerHTML){\r\n                    HighLight = true;\r\n                }\r\n                if (a.tagName == 'H1'){\r\n                    return <H1 HighLight={HighLight}><a href={\"#\" + a.innerHTML}><div css={MenuDivStyle}>{a.innerHTML}</div></a></H1>\r\n                }\r\n                else if (a.tagName == 'H2') {\r\n                    return <H2 HighLight={HighLight}><a href={\"#\" + a.innerHTML}><div css={MenuDivStyle}>{a.innerHTML}</div></a></H2>\r\n                }\r\n                }\r\n            )}\r\n                </Toc2>\r\n            </Toc>\r\n        </ContentWrapper>\r\n    )\r\n}\r\n\r\nexport default PostContent\r\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'thankyouflow/thankyouflow.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ntype UtterancesAttributesType = {\r\n    src: string\r\n    repo: string\r\n    'issue-term': string\r\n    label: string\r\n    theme: string\r\n    crossorigin: string\r\n    async: string\r\n};\r\n\r\nconst UtterancesWrapper = styled.div`\r\n  @media (max-width: 1020px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\nconst CommentWidget: FunctionComponent = function () {\r\n    const element = createRef<HTMLDivElement>()\r\n\r\n    useEffect(() => {\r\n        if (element.current === null) return\r\n\r\n        const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n        const attributes: UtterancesAttributesType = {\r\n            src,\r\n            repo,\r\n            'issue-term': 'pathname',\r\n            label: 'Comment',\r\n            theme: `github-light`,\r\n            crossorigin: 'anonymous',\r\n            async: 'true',\r\n        }\r\n\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            utterances.setAttribute(key, value)\r\n        })\r\n\r\n        element.current.appendChild(utterances)\r\n    }, [])\r\n\r\n    return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget","import React, { FunctionComponent } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { PostPageItemType } from 'types/PostItem.types' // 바로 아래에서 정의할 것입니다\r\nimport Template from 'components/Common/Template'\r\nimport PostHead from 'components/Post/PostHead'\r\nimport PostContent from 'components/Post/PostContent'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\nimport 'katex/dist/katex.min.css'\r\n\r\ntype PostTemplateProps = {\r\n    data: {\r\n        allMarkdownRemark: {\r\n            edges: PostPageItemType[]\r\n        }\r\n    }\r\n    location: {\r\n        href: string\r\n    }\r\n}\r\n\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n                                                                         data: {\r\n                                                                             allMarkdownRemark: { edges },\r\n                                                                         },\r\n                                                                         location: { href },\r\n                                                                     }) {\r\n    const {\r\n        node: {\r\n            html,\r\n            frontmatter: {\r\n                title,\r\n                summary,\r\n                date,\r\n                categories,\r\n                thumbnail: {\r\n                    childImageSharp: { gatsbyImageData },\r\n                    publicURL,\r\n                },\r\n            },\r\n        },\r\n    } = edges[0];\r\n    return (\r\n        <Template title={title} description={summary} url={href} image={publicURL}>\r\n            <PostHead\r\n                title={title}\r\n                date={date}\r\n                categories={categories}\r\n                thumbnail={gatsbyImageData}\r\n            />\r\n            <PostContent html={html} />\r\n            <CommentWidget />\r\n        </Template>\r\n    )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["PostHeadInfoWrapper","_styled","target","name","styles","Title","PostData","_ref","title","date","categories","___EmotionJSX","join","PostHeadWrapper","BackgroundImage","props","GatsbyImage","_extends","style","position","height","thumbnail","image","alt","PostHeadInfo","observerOption","threshold","rootMargin","getIntersectionObserver","setState","direction","prevYposition","IntersectionObserver","entries","forEach","entry","prevY","window","scrollY","isIntersecting","innerHTML","MarkdownRenderer","H1","HighLight","H2","ContentWrapper","Toc","Toc2","MenuDivStyle","html","currentInnerHTML","setCurrentInnerHTML","useState","headingEls","setHeadingEls","useEffect","observer","headingElements","Array","from","document","querySelectorAll","map","header","observe","console","log","dangerouslySetInnerHTML","__html","a","tagName","href","css","UtterancesWrapper","element","createRef","current","utterances","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","key","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","location","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Template","description","url","PostHead","PostContent","CommentWidget"],"sourceRoot":""}